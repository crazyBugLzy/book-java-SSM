{"./":{"url":"./","title":"前言","keywords":"","body":"Introduction Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:53 "},"docs/mybatis/":{"url":"docs/mybatis/","title":"介绍","keywords":"","body":"Mybatis介绍 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 13:56:49 "},"docs/mybatis/mybatis_MybatisXML.html":{"url":"docs/mybatis/mybatis_MybatisXML.html","title":"核心配置文件","keywords":"","body":"核心配置文件 从XML配置的角度来讲，主要就几个方面： 全局配置，大部分的默认配置就OK(可选) 配置Mapper，一共有4种方式。不管哪种方式都有一些限制，如果说能把配置文件和映射类放在同一个目录，那么使用方式4比较好。(必选) properties(可选) 参考下面这个配置文件就已经满足95%的场景了，所以没必要细节的看下属章节。 --> --> --> --> --> --> --> --> Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:03:21 "},"docs/mybatis/mybatis_property.html":{"url":"docs/mybatis/mybatis_property.html","title":"Property","keywords":"","body":"Property 有三种方式，优先级如下： 在 properties 元素体内指定的属性首先被读取。 然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。 最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。 同时可以占位符指定一个默认值，不过需要加入以下配置： Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:07:31 "},"docs/mybatis/mybatis_configuration.html":{"url":"docs/mybatis/mybatis_configuration.html","title":"全局配置","keywords":"","body":"全局配置 详情可参考：http://www.mybatis.org/mybatis-3/zh/configuration.html#settings Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_typeHandlers.html":{"url":"docs/mybatis/mybatis_typeHandlers.html","title":"typeHandlers","keywords":"","body":"类型处理转化器 typeHandlers 无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_objectFactory.html":{"url":"docs/mybatis/mybatis_objectFactory.html","title":"objectFactory","keywords":"","body":"objectFactory MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_plugins.html":{"url":"docs/mybatis/mybatis_plugins.html","title":"插件 plugins","keywords":"","body":"插件 plugins MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括： Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) ParameterHandler (getParameterObject, setParameters) ResultSetHandler (handleResultSets, handleOutputParameters) StatementHandler (prepare, parameterize, batch, update, query) Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_environments.html":{"url":"docs/mybatis/mybatis_environments.html","title":"配置环境 environments","keywords":"","body":"配置环境 environments 每个数据库对应一个 SqlSessionFactory 实例 环境XML配置看上面的配置 数据源（dataSource） UNPOOLED POOLED JNDI UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性： driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是 JDBC 驱动中可能包含的数据源类）。 url – 这是数据库的 JDBC URL 地址。 username – 登录数据库的用户名。 password – 登录数据库的密码。 defaultTransactionIsolationLevel – 默认的连接事务隔离级别。 作为可选项，你也可以传递属性给数据库驱动。要这样做，属性的前缀为“driver.”，例如： driver.encoding=UTF8 这将通过 DriverManager.getConnection(url,driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。 POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。 除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源： poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10 poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。 poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒） poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。 poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置，作用于每一个尝试从缓存池获取连接的线程. 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3 (新增于 3.4.5) `poolPingQuery- 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。 poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。 poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。 JNDI – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性： initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么 data_source 属性将会直接从 InitialContext 中寻找。 data_source – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。 和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如： env.encoding=UTF8 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_sqlMapper.html":{"url":"docs/mybatis/mybatis_sqlMapper.html","title":"SQL映射文件","keywords":"","body":"SQL映射文件 cache – 给定命名空间的缓存配置。 cache-ref – 其他命名空间缓存配置的引用。 resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。 sql – 可被其他语句引用的可重用语句块。 insert – 映射插入语句 update – 映射更新语句 delete – 映射删除语句 select – 映射查询语句 除了cache和cache-ref不常用，其他都是常用的。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_sqlMapper_select.html":{"url":"docs/mybatis/mybatis_sqlMapper_select.html","title":"SELECT","keywords":"","body":"SELECT 官方文档参考：http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#select id 最重要，是唯一标识 parameterType 参数类型，可选一般可以自动识别 resultType和resultMap 只能选择其一，需要必填，不然无法判断返回身噩梦 flushCache/useCache 缓存相关，得考虑是否使用 resultOrdered 这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:07:53 "},"docs/mybatis/mybatis_sqlMapper_other.html":{"url":"docs/mybatis/mybatis_sqlMapper_other.html","title":"INSERT,UPDATE和DELETE","keywords":"","body":"INSERT,UPDATE和DELETE ==useGeneratedKeys== ： 返回自动生成的主键，非常重要 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:08:06 "},"docs/mybatis/mybatis_sqlMapper_staticSQL.html":{"url":"docs/mybatis/mybatis_sqlMapper_staticSQL.html","title":"静态SQL","keywords":"","body":"静态SQL SQL 代码段 ${prefix}Table from select field1, field2, field3 绑定参数 #{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler} RESULT MAP 映射 结果集支持继承,extends=\"xxx\" 结果集也考虑自动映射的方式，自动驼峰转化，比较清晰点 高级映射和嵌套映射在分域查询中进行的比较少，因为大部分表分库分表后，无法连表查询。 查询语句 SELECT XXX : 此部分根据需要，选择是直接写在代码中还是通过SQL嵌入。如果多个地方都使用到，建议写在SQL里面 FROM TABLE：很多地方都用到，建议把这部分放在 WHERE ：动态查询则参考动态SQL RESULT : 具体类型或者Result set，具体类型如果是实体，全路径引用或者别名 resultType：如果列名和属性名没有精准匹配，可以使用SELECT AS 别名 根据结果情况返回不同的结果集：==discriminator== Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:08:11 "},"docs/mybatis/mybatis_sqlMapper_sql.html":{"url":"docs/mybatis/mybatis_sqlMapper_sql.html","title":"动态SQL","keywords":"","body":"动态SQL choose when otherwise SELECT * FROM BLOG WHERE state = ‘ACTIVE’ AND title like #{title} AND author_name like #{author.name} AND featured = 1 trim, where, set where 处理的第一种方式：标签 SELECT * FROM BLOG state = #{state} AND title like #{title} AND author_name like #{author.name} where 处理的第二种方式：trim 进行处理 ... 动态SET update Author username=#{username}, password=#{password}, email=#{email}, bio=#{bio} where id=#{id} foreach SELECT * FROM POST P WHERE ID in #{item} bind SELECT * FROM BLOG WHERE title LIKE #{pattern} Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:08:27 "},"docs/mybatis/mybatis_cache.html":{"url":"docs/mybatis/mybatis_cache.html","title":"Cache","keywords":"","body":"Cache 默认不使用。 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_javaApi.html":{"url":"docs/mybatis/mybatis_javaApi.html","title":"JAVA API","keywords":"","body":"JAVA API 通过SqlSessionFactoryBuilder来创建SessionFactory,然后用SessionFactoryOpenSQLSession。SQLSession可以获取映射类——sqlSession.getMapper(UserDao.class)。SqlSession要确认被关闭。 SqlSessions SqlSessionFactoryBuilder SqlSessionFactory Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/mybatis/mybatis_sqlinJava.html":{"url":"docs/mybatis/mybatis_sqlinJava.html","title":"JAVA SQL语句的创建","keywords":"","body":"JAVA SQL语句的创建 参考：http://www.mybatis.org/mybatis-3/zh/statement-builders.html private String selectPersonSql() { return new SQL() {{ SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\"); SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\"); FROM(\"PERSON P\"); FROM(\"ACCOUNT A\"); INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\"); INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\"); WHERE(\"P.ID = A.ID\"); WHERE(\"P.FIRST_NAME like ?\"); OR(); WHERE(\"P.LAST_NAME like ?\"); GROUP_BY(\"P.ID\"); HAVING(\"P.LAST_NAME like ?\"); OR(); HAVING(\"P.FIRST_NAME like ?\"); ORDER_BY(\"P.ID\"); ORDER_BY(\"P.FULL_NAME\"); }}.toString(); } Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:09:04 "},"docs/mybatis/mybatis_test.html":{"url":"docs/mybatis/mybatis_test.html","title":"测试方式","keywords":"","body":"测试方式 public abstract class BaseTest { private String configPath = \"mybatis.xml\"; private InputStream inputStream; private SqlSessionFactory sqlSessionFactory; private SqlSession sqlSession; //加载资源 protected SqlSession loadResource() throws IOException { inputStream = Resources.getResourceAsStream(configPath); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); sqlSession = sqlSessionFactory.openSession(); return sqlSession; } //关闭资源 protected void destory() throws IOException { if (inputStream == null) { inputStream.close(); } if (sqlSession == null) { sqlSession.close(); } } } public class UserDaoTest extends com.lzy.mybatis.BaseTest { @Test public void testListUser() { try { SqlSession sqlSession = loadResource(); UserDao userDao = sqlSession.getMapper(UserDao.class); List users = userDao.listUser(); System.out.println(users.toString()); destory(); } catch (IOException e) { e.printStackTrace(); } } } Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 14:08:34 "},"docs/mybatis/mybatis_import.html":{"url":"docs/mybatis/mybatis_import.html","title":"Import Package","keywords":"","body":"Import Package org.mybatis mybatis 3.4.5 mysql mysql-connector-java 6.0.6 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-15 14:28:54 "},"docs/spring/":{"url":"docs/spring/","title":"介绍","keywords":"","body":"Spring介绍 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 13:56:49 "},"docs/spring-boot/":{"url":"docs/spring-boot/","title":"介绍","keywords":"","body":"介绍 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 13:59:40 "},"docs/spring-test/":{"url":"docs/spring-test/","title":"介绍","keywords":"","body":"介绍 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 13:59:40 "},"docs/spring-mvc/":{"url":"docs/spring-mvc/","title":"介绍","keywords":"","body":"介绍 Copyright © crazybuglzy.com 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-04-16 13:59:40 "}}